<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>SIH - Fuedinct AP Desh-3D Project</title>
    <style>
        * {
            margin: 0;
            padding: 0;
            box-sizing: border-box;
        }

        body {
            font-family: -apple-system, BlinkMacSystemFont, 'Segoe UI', Roboto, Oxygen, Ubuntu, sans-serif;
            background: linear-gradient(135deg, #1a1a2e 0%, #16213e 25%, #0f3460 75%, #533483 100%);
            min-height: 100vh;
            overflow-x: hidden;
            color: white;
        }

        .container {
            width: 95%;
            max-width: 1400px;
            margin: 0 auto;
            background: rgba(255, 255, 255, 0.03);
            backdrop-filter: blur(20px);
            border-radius: 30px;
            border: 1px solid rgba(255, 255, 255, 0.1);
            padding: 30px;
            margin-top: 20px;
            margin-bottom: 20px;
            box-shadow: 0 25px 50px rgba(0, 0, 0, 0.3);
            animation: slideIn 1s ease-out;
            position: relative;
            overflow: hidden;
        }

        @keyframes slideIn {
            from { opacity: 0; transform: translateY(30px); }
            to { opacity: 1; transform: translateY(0); }
        }

        .bg-particles {
            position: absolute;
            top: 0;
            left: 0;
            width: 100%;
            height: 100%;
            pointer-events: none;
            z-index: -1;
        }

        .particle {
            position: absolute;
            width: 4px;
            height: 4px;
            background: rgba(255, 255, 255, 0.1);
            border-radius: 50%;
            animation: float 8s ease-in-out infinite;
        }

        @keyframes float {
            0%, 100% { transform: translateY(0) translateX(0); opacity: 0.1; }
            50% { transform: translateY(-30px) translateX(10px); opacity: 0.3; }
        }

        .header {
            display: flex;
            justify-content: space-between;
            align-items: center;
            margin-bottom: 30px;
            padding: 0 10px;
        }

        .logo {
            font-size: 32px;
            font-weight: bold;
            color: white;
            text-shadow: 0 0 20px rgba(255, 255, 255, 0.3);
        }

        .nav-menu {
            display: flex;
            gap: 40px;
            list-style: none;
        }

        .nav-menu li {
            color: rgba(255, 255, 255, 0.7);
            cursor: pointer;
            transition: all 0.3s;
            padding: 8px 16px;
            border-radius: 8px;
            position: relative;
        }

        .nav-menu li:hover {
            color: white;
            background: rgba(255, 255, 255, 0.1);
            transform: translateY(-2px);
        }

        .header-buttons {
            display: flex;
            gap: 15px;
        }

        .btn {
            padding: 12px 28px;
            border-radius: 12px;
            border: none;
            cursor: pointer;
            font-size: 14px;
            font-weight: 600;
            transition: all 0.3s;
            position: relative;
            overflow: hidden;
        }

        .btn::before {
            content: '';
            position: absolute;
            top: 0;
            left: -100%;
            width: 100%;
            height: 100%;
            background: linear-gradient(90deg, transparent, rgba(255,255,255,0.2), transparent);
            transition: left 0.5s;
        }

        .btn:hover::before {
            left: 100%;
        }

        .btn-outline {
            background: transparent;
            color: white;
            border: 2px solid rgba(255, 255, 255, 0.3);
        }

        .btn-outline:hover {
            background: rgba(255, 255, 255, 0.1);
            border-color: rgba(255, 255, 255, 0.6);
            transform: translateY(-2px);
            box-shadow: 0 8px 16px rgba(0, 0, 0, 0.2);
        }

        .btn-primary {
            background: linear-gradient(135deg, #6366f1, #8b5cf6);
            color: white;
            border: none;
        }

        .btn-primary:hover {
            transform: translateY(-3px);
            box-shadow: 0 12px 24px rgba(139, 92, 246, 0.4);
            background: linear-gradient(135deg, #7c3aed, #a855f7);
        }

        .main-content {
            display: grid;
            grid-template-columns: 1fr 1fr;
            gap: 60px;
            align-items: center;
            margin-bottom: 40px;
        }

        .content-left h1 {
            font-size: 52px;
            color: white;
            margin-bottom: 25px;
            line-height: 1.1;
            text-shadow: 0 0 30px rgba(255, 255, 255, 0.1);
            animation: glow 3s ease-in-out infinite alternate;
        }

        @keyframes glow {
            from { text-shadow: 0 0 30px rgba(255, 255, 255, 0.1); }
            to { text-shadow: 0 0 40px rgba(139, 92, 246, 0.3), 0 0 60px rgba(139, 92, 246, 0.1); }
        }

        .content-left p {
            color: rgba(255, 255, 255, 0.8);
            font-size: 18px;
            margin-bottom: 35px;
            line-height: 1.7;
        }

        .action-buttons {
            display: flex;
            gap: 20px;
            margin-bottom: 20px;
        }

        .upload-btn {
            background: linear-gradient(135deg, #a855f7, #9333ea);
            padding: 15px 35px;
            font-size: 16px;
        }

        .preview-btn {
            background: rgba(255, 255, 255, 0.1);
            border: 2px solid rgba(255, 255, 255, 0.3);
            padding: 15px 35px;
            font-size: 16px;
        }

        /* 3D Scene Container */
        .scene-container {
            position: relative;
            height: 450px;
            display: flex;
            align-items: center;
            justify-content: center;
            perspective: 1000px;
        }

        .cube-scene {
            position: relative;
            width: 300px;
            height: 300px;
            transform-style: preserve-3d;
            animation: rotate3D 20s linear infinite;
        }

        @keyframes rotate3D {
            0% { transform: rotateX(-15deg) rotateY(0deg) rotateZ(0deg); }
            100% { transform: rotateX(-15deg) rotateY(360deg) rotateZ(5deg); }
        }

        .wireframe-cube {
            width: 250px;
            height: 250px;
            position: relative;
            transform-style: preserve-3d;
        }

        .wireframe-face {
            position: absolute;
            width: 250px;
            height: 250px;
            border: 3px solid #00d4ff;
            background: linear-gradient(135deg, rgba(0, 212, 255, 0.05), rgba(139, 92, 246, 0.05));
            backdrop-filter: blur(5px);
        }

        .wireframe-face.front { transform: translateZ(125px); }
        .wireframe-face.back { transform: rotateY(180deg) translateZ(125px); }
        .wireframe-face.left { transform: rotateY(-90deg) translateZ(125px); }
        .wireframe-face.right { transform: rotateY(90deg) translateZ(125px); }
        .wireframe-face.top { transform: rotateX(90deg) translateZ(125px); }
        .wireframe-face.bottom { transform: rotateX(-90deg) translateZ(125px); }

        /* Inner gradient cube */
        .gradient-cube {
            position: absolute;
            width: 120px;
            height: 120px;
            top: 65px;
            left: 65px;
            transform-style: preserve-3d;
        }

        .gradient-face {
            position: absolute;
            width: 120px;
            height: 120px;
        }

        .gradient-face.front {
            background: linear-gradient(135deg, #fbbf24, #f59e0b);
            transform: translateZ(60px);
        }
        .gradient-face.back {
            background: linear-gradient(135deg, #ec4899, #be185d);
            transform: rotateY(180deg) translateZ(60px);
        }
        .gradient-face.left {
            background: linear-gradient(135deg, #8b5cf6, #7c3aed);
            transform: rotateY(-90deg) translateZ(60px);
        }
        .gradient-face.right {
            background: linear-gradient(135deg, #06b6d4, #0891b2);
            transform: rotateY(90deg) translateZ(60px);
        }
        .gradient-face.top {
            background: linear-gradient(135deg, #10b981, #059669);
            transform: rotateX(90deg) translateZ(60px);
        }
        .gradient-face.bottom {
            background: linear-gradient(135deg, #f97316, #ea580c);
            transform: rotateX(-90deg) translateZ(60px);
        }

        /* Orbital rings */
        .orbit-ring {
            position: absolute;
            border: 2px solid rgba(139, 92, 246, 0.4);
            border-radius: 50%;
            animation: spin 15s linear infinite;
        }

        .orbit-1 {
            width: 400px;
            height: 400px;
            top: -75px;
            left: -75px;
        }

        .orbit-2 {
            width: 350px;
            height: 350px;
            top: -50px;
            left: -50px;
            animation-direction: reverse;
            animation-duration: 12s;
            border-color: rgba(236, 72, 153, 0.4);
        }

        @keyframes spin {
            from { transform: rotateZ(0deg); }
            to { transform: rotateZ(360deg); }
        }

        /* Floating elements */
        .floating-element {
            position: absolute;
            border-radius: 50%;
            animation: floatAround 8s ease-in-out infinite;
        }

        .element-1 {
            width: 12px;
            height: 12px;
            background: #fbbf24;
            top: 10%;
            left: 20%;
            animation-delay: 0s;
        }

        .element-2 {
            width: 8px;
            height: 8px;
            background: #06b6d4;
            top: 70%;
            right: 10%;
            animation-delay: 2s;
        }

        .element-3 {
            width: 10px;
            height: 10px;
            background: #ec4899;
            bottom: 20%;
            left: 15%;
            animation-delay: 4s;
        }

        .element-4 {
            width: 6px;
            height: 6px;
            background: #8b5cf6;
            top: 30%;
            right: 25%;
            animation-delay: 6s;
        }

        @keyframes floatAround {
            0%, 100% { transform: translateY(0) scale(1) rotate(0deg); }
            25% { transform: translateY(-20px) scale(1.2) rotate(90deg); }
            50% { transform: translateY(-10px) scale(0.8) rotate(180deg); }
            75% { transform: translateY(-25px) scale(1.1) rotate(270deg); }
        }

        /* Toolbar section */
        .toolbar {
            background: rgba(0, 0, 0, 0.4);
            backdrop-filter: blur(20px);
            border-radius: 20px;
            padding: 20px 30px;
            display: flex;
            align-items: center;
            gap: 30px;
            margin-bottom: 30px;
            border: 1px solid rgba(255, 255, 255, 0.1);
        }

        .toolbar-item {
            display: flex;
            align-items: center;
            gap: 12px;
            color: rgba(255, 255, 255, 0.7);
            cursor: pointer;
            transition: all 0.3s;
            padding: 8px 16px;
            border-radius: 12px;
        }

        .toolbar-item:hover {
            color: white;
            background: rgba(255, 255, 255, 0.1);
            transform: translateY(-2px);
        }

        .toolbar-item.active {
            color: #a855f7;
            background: rgba(168, 85, 247, 0.1);
        }

        .toolbar-icon {
            width: 20px;
            height: 20px;
            background: currentColor;
            mask-size: contain;
            mask-repeat: no-repeat;
        }

        .dropdown {
            background: rgba(255, 255, 255, 0.1);
            border: 1px solid rgba(255, 255, 255, 0.2);
            color: white;
            padding: 8px 16px;
            border-radius: 8px;
            cursor: pointer;
            transition: all 0.3s;
        }

        .dropdown:hover {
            background: rgba(255, 255, 255, 0.15);
        }

        /* Bottom section with models */
        .bottom-section {
            display: grid;
            grid-template-columns: 1fr 1fr 2fr;
            gap: 25px;
            margin-top: 30px;
        }

        .model-card {
            background: rgba(255, 255, 255, 0.05);
            backdrop-filter: blur(15px);
            border-radius: 20px;
            padding: 20px;
            border: 1px solid rgba(255, 255, 255, 0.1);
            transition: all 0.4s cubic-bezier(0.4, 0, 0.2, 1);
            cursor: pointer;
            position: relative;
            overflow: hidden;
        }

        .model-card::before {
            content: '';
            position: absolute;
            top: 0;
            left: -100%;
            width: 100%;
            height: 100%;
            background: linear-gradient(90deg, transparent, rgba(255,255,255,0.1), transparent);
            transition: left 0.5s;
        }

        .model-card:hover::before {
            left: 100%;
        }

        .model-card:hover {
            transform: translateY(-8px) scale(1.02);
            background: rgba(255, 255, 255, 0.08);
            box-shadow: 0 20px 40px rgba(0, 0, 0, 0.3);
            border-color: rgba(168, 85, 247, 0.3);
        }

        /* 3D Chair Models */
        .chair-model {
            width: 100%;
            height: 180px;
            position: relative;
            perspective: 800px;
            display: flex;
            align-items: center;
            justify-content: center;
            border-radius: 15px;
            margin-bottom: 15px;
            overflow: hidden;
            background: linear-gradient(135deg, rgba(168, 85, 247, 0.1), rgba(236, 72, 153, 0.1));
            border: 2px solid rgba(255, 255, 255, 0.1);
        }

        .chair-3d {
            width: 120px;
            height: 140px;
            transform-style: preserve-3d;
            animation: rotateChair 12s linear infinite;
            position: relative;
        }

        @keyframes rotateChair {
            0% { transform: rotateY(0deg) rotateX(-10deg); }
            100% { transform: rotateY(360deg) rotateX(-10deg); }
        }

        /* Office Chair Styling */
        .office-chair .chair-seat {
            position: absolute;
            width: 80px;
            height: 60px;
            background: linear-gradient(135deg, #4a5568, #2d3748);
            border-radius: 12px;
            top: 60px;
            left: 20px;
            transform: rotateX(-10deg);
            box-shadow: 0 10px 20px rgba(0, 0, 0, 0.3);
        }

        .office-chair .chair-back {
            position: absolute;
            width: 70px;
            height: 80px;
            background: linear-gradient(135deg, #4a5568, #2d3748);
            border-radius: 12px 12px 4px 4px;
            top: 10px;
            left: 25px;
            transform: rotateX(15deg);
            box-shadow: inset 0 2px 4px rgba(255, 255, 255, 0.1);
        }

        .office-chair .chair-base {
            position: absolute;
            width: 100px;
            height: 8px;
            background: linear-gradient(135deg, #1a202c, #2d3748);
            border-radius: 50px;
            bottom: 10px;
            left: 10px;
            transform: rotateX(70deg);
        }

        .office-chair .chair-arm {
            position: absolute;
            width: 40px;
            height: 12px;
            background: linear-gradient(135deg, #4a5568, #2d3748);
            border-radius: 6px;
            top: 70px;
            transform: rotateZ(90deg);
        }

        .office-chair .chair-arm.left { left: -5px; }
        .office-chair .chair-arm.right { right: -5px; }

        /* Armchair Styling */
        .armchair .armchair-seat {
            position: absolute;
            width: 85px;
            height: 65px;
            background: linear-gradient(135deg, #6b46c1, #553c9a);
            border-radius: 15px;
            top: 55px;
            left: 17px;
            transform: rotateX(-5deg);
            box-shadow: 0 15px 25px rgba(107, 70, 193, 0.3);
        }

        .armchair .armchair-back {
            position: absolute;
            width: 85px;
            height: 90px;
            background: linear-gradient(135deg, #6b46c1, #553c9a);
            border-radius: 20px 20px 8px 8px;
            top: 5px;
            left: 17px;
            transform: rotateX(10deg);
            box-shadow: inset 0 3px 6px rgba(255, 255, 255, 0.1);
        }

        .armchair .armchair-base {
            position: absolute;
            width: 110px;
            height: 10px;
            background: linear-gradient(135deg, #4c1d95, #553c9a);
            border-radius: 50px;
            bottom: 8px;
            left: 5px;
            transform: rotateX(60deg);
        }

        .armchair .armchair-arm {
            position: absolute;
            width: 20px;
            height: 50px;
            background: linear-gradient(135deg, #6b46c1, #553c9a);
            border-radius: 10px;
            top: 60px;
        }

        .armchair .armchair-arm.left { left: -5px; }
        .armchair .armchair-arm.right { right: -5px; }

        .model-info h3 {
            color: white;
            font-size: 16px;
            margin-bottom: 8px;
            font-weight: 600;
        }

        .model-info p {
            color: rgba(255, 255, 255, 0.6);
            font-size: 14px;
        }

        .model-stats {
            display: flex;
            justify-content: space-between;
            margin-top: 10px;
            font-size: 12px;
            color: rgba(255, 255, 255, 0.5);
        }

        /* Shape gallery */
        .shape-gallery {
            background: rgba(255, 255, 255, 0.03);
            backdrop-filter: blur(15px);
            border-radius: 20px;
            padding: 25px;
            border: 1px solid rgba(255, 255, 255, 0.1);
        }

        .gallery-header {
            display: flex;
            justify-content: space-between;
            align-items: center;
            margin-bottom: 20px;
        }

        .gallery-title {
            font-size: 18px;
            font-weight: 600;
            color: white;
        }

        .view-toggle {
            display: flex;
            gap: 10px;
        }

        .toggle-btn {
            padding: 6px 12px;
            background: rgba(255, 255, 255, 0.1);
            border: 1px solid rgba(255, 255, 255, 0.2);
            color: white;
            border-radius: 8px;
            cursor: pointer;
            transition: all 0.3s;
            font-size: 12px;
        }

        .toggle-btn.active {
            background: rgba(168, 85, 247, 0.3);
            border-color: #a855f7;
        }

        .shapes-grid {
            display: grid;
            grid-template-columns: repeat(3, 1fr);
            gap: 15px;
            margin-bottom: 20px;
        }

        .shape-item {
            background: rgba(255, 255, 255, 0.05);
            border-radius: 12px;
            padding: 15px;
            text-align: center;
            cursor: pointer;
            transition: all 0.3s;
            border: 1px solid rgba(255, 255, 255, 0.1);
        }

        .shape-item:hover {
            background: rgba(168, 85, 247, 0.1);
            transform: translateY(-3px);
            box-shadow: 0 10px 20px rgba(0, 0, 0, 0.2);
        }

        .shape-icon {
            width: 40px;
            height: 40px;
            margin: 0 auto 8px;
            background: linear-gradient(135deg, #06b6d4, #8b5cf6);
            border-radius: 8px;
            display: flex;
            align-items: center;
            justify-content: center;
            color: white;
            font-weight: bold;
        }

        .shape-name {
            font-size: 12px;
            color: rgba(255, 255, 255, 0.8);
        }

        .controls-section {
            display: flex;
            gap: 15px;
            flex-wrap: wrap;
        }

        .control-group {
            display: flex;
            gap: 8px;
        }

        .control-btn {
            padding: 8px 16px;
            background: rgba(255, 255, 255, 0.1);
            border: 1px solid rgba(255, 255, 255, 0.2);
            color: white;
            border-radius: 8px;
            cursor: pointer;
            transition: all 0.3s;
            font-size: 12px;
        }

        .control-btn:hover {
            background: rgba(168, 85, 247, 0.2);
            border-color: #a855f7;
        }

        .control-btn.active {
            background: rgba(168, 85, 247, 0.3);
            border-color: #a855f7;
        }

        .tags-section {
            margin-top: 15px;
            display: flex;
            gap: 8px;
            flex-wrap: wrap;
        }

        .tag {
            background: rgba(168, 85, 247, 0.2);
            color: #c084fc;
            padding: 4px 10px;
            border-radius: 12px;
            font-size: 11px;
            border: 1px solid rgba(168, 85, 247, 0.3);
        }

        .toast {
            position: fixed;
            top: 20px;
            right: 20px;
            background: rgba(0, 0, 0, 0.8);
            color: white;
            padding: 12px 20px;
            border-radius: 12px;
            backdrop-filter: blur(10px);
            border: 1px solid rgba(255, 255, 255, 0.2);
            z-index: 1000;
            font-size: 14px;
            font-weight: 500;
            display: none;
            opacity: 0;
            transform: translateY(-20px);
            transition: all 0.3s cubic-bezier(0.4, 0, 0.2, 1);
            box-shadow: 0 10px 30px rgba(0, 0, 0, 0.3);
        }

        .model-card.selected {
            background: rgba(168, 85, 247, 0.15) !important;
            border-color: rgba(168, 85, 247, 0.5) !important;
            box-shadow: 0 0 30px rgba(168, 85, 247, 0.3) !important;
        }

        .shape-item.selected {
            background: rgba(168, 85, 247, 0.2) !important;
            border-color: rgba(168, 85, 247, 0.5) !important;
            transform: translateY(-3px) scale(1.05) !important;
        }

        .nav-menu li.active {
            background: rgba(168, 85, 247, 0.2);
            color: white;
            border-color: rgba(168, 85, 247, 0.3);
        }

        .cube-scene.preview-mode {
            cursor: grab;
        }

        .cube-scene.preview-mode:active {
            cursor: grabbing;
        }

        /* Responsive design */
        @media (max-width: 1200px) {
            .main-content {
                grid-template-columns: 1fr;
                gap: 40px;
            }

            .bottom-section {
                grid-template-columns: 1fr;
            }

            .content-left h1 {
                font-size: 42px;
            }
        }

        @media (max-width: 768px) {
            .container {
                padding: 20px;
                margin: 10px;
                width: 98%;
            }

            .header {
                flex-direction: column;
                gap: 20px;
            }

            .nav-menu {
                gap: 20px;
            }

            .toolbar {
                flex-wrap: wrap;
                gap: 15px;
            }

            .shapes-grid {
                grid-template-columns: repeat(2, 1fr);
            }
        }
    </style>
</head>
<body>
    <div class="bg-particles" id="particles"></div>

    <div class="container">
        <div class="header">
            <div class="logo">SIH</div>
            <ul class="nav-menu">
                <li onclick="highlightMenu(this)">Furniture</li>
                <li onclick="highlightMenu(this)">Vehicles</li>
                <li onclick="highlightMenu(this)">Objects</li>
                <li onclick="highlightMenu(this)">All Models</li>
            </ul>
            <div class="header-buttons">
                <button class="btn btn-outline" onclick="showToast('Viewer Mode Activated')">Viewer</button>
                <button class="btn btn-primary" onclick="showToast('Version Control Feature')">Version</button>
            </div>
        </div>

        <div class="main-content">
            <div class="content-left">
                <h1>2D to 3D Converter<br>Fuedinct AP Project</h1>
                <p>Advanced AI-powered system to convert 2D images and sketches into detailed 3D models with precision and creativity.</p>
                <div class="action-buttons">
                    <button class="btn btn-primary upload-btn" onclick="triggerUpload()">Upload</button>
                    <button class="btn btn-outline preview-btn" onclick="togglePreview()">Preview</button>
                </div>
            </div>

            <div class="scene-container">
                <div class="cube-scene">
                    <div class="wireframe-cube">
                        <div class="wireframe-face front"></div>
                        <div class="wireframe-face back"></div>
                        <div class="wireframe-face left"></div>
                        <div class="wireframe-face right"></div>
                        <div class="wireframe-face top"></div>
                        <div class="wireframe-face bottom"></div>

                        <div class="gradient-cube">
                            <div class="gradient-face front"></div>
                            <div class="gradient-face back"></div>
                            <div class="gradient-face left"></div>
                            <div class="gradient-face right"></div>
                            <div class="gradient-face top"></div>
                            <div class="gradient-face bottom"></div>
                        </div>
                    </div>

                    <div class="orbit-ring orbit-1"></div>
                    <div class="orbit-ring orbit-2"></div>

                    <div class="floating-element element-1"></div>
                    <div class="floating-element element-2"></div>
                    <div class="floating-element element-3"></div>
                    <div class="floating-element element-4"></div>
                </div>
            </div>
        </div>

        <!-- Toolbar section -->
        <div class="toolbar">
            <div class="toolbar-item active" onclick="setActiveToolbar(this)">
                <div class="toolbar-icon">🎨</div>
            </div>
            <select class="dropdown" onchange="handleDropdownChange(this)">
                <option>Model Fusion</option>
                <option>Advanced Render</option>
                <option>Basic Mode</option>
                <option>Professional</option>
            </select>
            <div class="toolbar-item" onclick="setActiveToolbar(this)">
                <div class="toolbar-icon">⚙️</div>
            </div>
            <div class="toolbar-item" onclick="setActiveToolbar(this)">
                <div class="toolbar-icon">🔄</div>
            </div>
            <div class="toolbar-item" onclick="setActiveToolbar(this)">
                <span>3D</span>
            </div>
            <div style="margin-left: auto;"></div>
            <div class="toolbar-item" onclick="setActiveToolbar(this)">
                <span>📊 Viewer</span>
            </div>
            <div class="toolbar-item" onclick="setActiveToolbar(this)">
                <div class="toolbar-icon">⚡</div>
            </div>
        </div>

        <!-- Bottom section with models and shapes -->
        <div class="bottom-section">
            <!-- Office Chair Model -->
            <div class="model-card" onclick="selectModel(this, 'Scene Sync')">
                <div class="chair-model">
                    <div class="chair-3d office-chair">
                        <div class="chair-back"></div>
                        <div class="chair-seat"></div>
                        <div class="chair-arm left"></div>
                        <div class="chair-arm right"></div>
                        <div class="chair-base"></div>
                    </div>
                </div>
                <div class="model-info">
                    <h3>Scene Sync</h3>
                    <p>Office Chair Model</p>
                    <div class="model-stats">
                        <span>Polygons: 2.4k</span>
                        <span>Size: 1.2MB</span>
                    </div>
                </div>
            </div>

            <!-- Armchair Model -->
            <div class="model-card" onclick="selectModel(this, 'Asset Library')">
                <div class="chair-model">
                    <div class="chair-3d armchair">
                        <div class="armchair-back"></div>
                        <div class="armchair-seat"></div>
                        <div class="armchair-arm left"></div>
                        <div class="armchair-arm right"></div>
                        <div class="armchair-base"></div>
                    </div>
                </div>
                <div class="model-info">
                    <h3>Asset Library</h3>
                    <p>Comfort Armchair</p>
                    <div class="model-stats">
                        <span>Polygons: 3.7k</span>
                        <span>Size: 2.1MB</span>
                    </div>
                </div>
            </div>

            <!-- Shape Gallery -->
            <div class="shape-gallery">
                <div class="gallery-header">
                    <div class="gallery-title">3D Shapes</div>
                    <div class="view-toggle">
                        <button class="toggle-btn active" onclick="toggleView(this, 'grid')">📊 Grid View</button>
                        <button class="toggle-btn" onclick="toggleView(this, 'list')">⚡ List View</button>
                    </div>
                </div>

                <div class="shapes-grid">
                    <div class="shape-item" onclick="selectShape(this, 'wireframe')">
                        <div class="shape-icon">
                            <svg width="24" height="24" viewBox="0 0 24 24" fill="none">
                                <path d="M12 2L2 7L12 12L22 7L12 2Z" stroke="currentColor" stroke-width="2" stroke-linejoin="round"/>
                                <path d="M2 17L12 22L22 17" stroke="currentColor" stroke-width="2" stroke-linejoin="round"/>
                                <path d="M2 12L12 17L22 12" stroke="currentColor" stroke-width="2" stroke-linejoin="round"/>
                            </svg>
                        </div>
                        <div class="shape-name">Wireframe</div>
                    </div>
                    <div class="shape-item" onclick="selectShape(this, 'solid')">
                        <div class="shape-icon">
                            <svg width="24" height="24" viewBox="0 0 24 24" fill="currentColor">
                                <path d="M12 2L2 7L12 12L22 7L12 2Z"/>
                                <path d="M2 17L12 22L22 17L12 12L2 17Z"/>
                                <path d="M2 12L12 17L22 12L12 7L2 12Z"/>
                            </svg>
                        </div>
                        <div class="shape-name">Solid</div>
                    </div>
                    <div class="shape-item" onclick="selectShape(this, 'textured')">
                        <div class="shape-icon">
                            <svg width="24" height="24" viewBox="0 0 24 24" fill="none">
                                <rect x="3" y="3" width="18" height="18" rx="2" stroke="currentColor" stroke-width="2" fill="none"/>
                                <rect x="7" y="7" width="10" height="10" rx="1" stroke="currentColor" stroke-width="1.5" fill="currentColor" opacity="0.3"/>
                            </svg>
                        </div>
                        <div class="shape-name">Textured</div>
                    </div>
                    <div class="shape-item" onclick="selectShape(this, 'material')">
                        <div class="shape-icon">
                            <svg width="24" height="24" viewBox="0 0 24 24" fill="none">
                                <ellipse cx="12" cy="5" rx="9" ry="3" stroke="currentColor" stroke-width="2" fill="currentColor" opacity="0.2"/>
                                <path d="M21 12V5" stroke="currentColor" stroke-width="2"/>
                                <path d="M3 12V5" stroke="currentColor" stroke-width="2"/>
                                <ellipse cx="12" cy="19" rx="9" ry="3" stroke="currentColor" stroke-width="2" fill="currentColor" opacity="0.4"/>
                            </svg>
                        </div>
                        <div class="shape-name">Material</div>
                    </div>
                    <div class="shape-item" onclick="selectShape(this, 'extrude')">
                        <div class="shape-icon">
                            <svg width="24" height="24" viewBox="0 0 24 24" fill="none">
                                <path d="M14 2L20 8V20A2 2 0 0118 22H6A2 2 0 014 20V4A2 2 0 016 2H14Z" stroke="currentColor" stroke-width="2" fill="currentColor" opacity="0.2"/>
                                <path d="M14 2V8H20" stroke="currentColor" stroke-width="2"/>
                                <path d="M16 13L12 17L8 13" stroke="currentColor" stroke-width="2"/>
                                <path d="M12 17V9" stroke="currentColor" stroke-width="2"/>
                            </svg>
                        </div>
                        <div class="shape-name">Extrude</div>
                    </div>
                    <div class="shape-item" onclick="selectShape(this, 'mesh')">
                        <div class="shape-icon">
                            <svg width="24" height="24" viewBox="0 0 24 24" fill="none">
                                <circle cx="12" cy="12" r="10" stroke="currentColor" stroke-width="2" fill="currentColor" opacity="0.1"/>
                                <path d="M2 12H22" stroke="currentColor" stroke-width="1"/>
                                <path d="M12 2A15.3 15.3 0 014 12A15.3 15.3 0 0112 22A15.3 15.3 0 0120 12A15.3 15.3 0 0112 2Z" stroke="currentColor" stroke-width="1"/>
                            </svg>
                        </div>
                        <div class="shape-name">Mesh</div>
                    </div>
                </div>

                <div class="controls-section">
                    <div class="control-group">
                        <button class="control-btn active" onclick="toggleControl(this)">⚙️ Configure</button>
                        <button class="control-btn" onclick="toggleControl(this)">📊 High Quality</button>
                    </div>
                    <div class="control-group">
                        <button class="control-btn" onclick="toggleControl(this)">✨ Auto Vertex</button>
                    </div>
                    <div class="control-group">
                        <button class="control-btn" onclick="toggleControl(this)">🔄 Process</button>
                        <button class="control-btn" onclick="toggleControl(this)">📐 Geometry</button>
                        <button class="control-btn" onclick="toggleControl(this)">⚡ Render</button>
                    </div>
                    <div class="control-group">
                        <button class="control-btn" onclick="toggleControl(this)">🎯 Precision</button>
                        <button class="control-btn active" onclick="toggleControl(this)">🔐 Secure</button>
                    </div>
                </div>

                <div class="tags-section">
                    <span class="tag">Auto Vertex</span>
                    <span class="tag">3D Render</span>
                    <span class="tag">Wireframe</span>
                    <span class="tag">Interactive</span>
                </div>
            </div>
        </div>

        <div id="toast" class="toast"></div>
    </div>

    <script>
        function createParticles() {
            const container = document.getElementById('particles');
            const particleCount = 50;

            for (let i = 0; i < particleCount; i++) {
                const particle = document.createElement('div');
                particle.className = 'particle';
                particle.style.left = Math.random() * 100 + '%';
                particle.style.top = Math.random() * 100 + '%';
                particle.style.animationDelay = Math.random() * 8 + 's';
                particle.style.animationDuration = (8 + Math.random() * 4) + 's';
                container.appendChild(particle);
            }
        }

        function highlightMenu(element) {
            document.querySelectorAll('.nav-menu li').forEach(item => {
                item.classList.remove('active');
            });
            element.classList.add('active');
            showToast(`Navigated to ${element.textContent}`);
        }

        function setActiveToolbar(element) {
            document.querySelectorAll('.toolbar-item').forEach(item => {
                item.classList.remove('active');
            });
            element.classList.add('active');
            showToast('Tool activated');
        }

        function handleDropdownChange(select) {
            showToast(`Mode changed to: ${select.value}`);
            select.style.background = 'rgba(168, 85, 247, 0.2)';
            setTimeout(() => {
                select.style.background = 'rgba(255, 255, 255, 0.1)';
            }, 300);
        }

        function selectModel(element, modelName) {
            document.querySelectorAll('.model-card').forEach(card => {
                card.classList.remove('selected');
            });
            element.classList.add('selected');
            showToast(`Model selected: ${modelName}`);
            element.style.transform = 'translateY(-8px) scale(1.05)';
            setTimeout(() => {
                element.style.transform = 'translateY(-8px) scale(1.02)';
            }, 200);
        }

        function selectShape(element, shapeName) {
            document.querySelectorAll('.shape-item').forEach(item => {
                item.classList.remove('selected');
            });
            element.classList.add('selected');
            showToast(`Shape selected: ${shapeName}`);
            changeCubeStyle(shapeName);
        }

        function changeCubeStyle(style) {
            const cubeScene = document.querySelector('.cube-scene');
            cubeScene.style.transform = 'scale(0.8)';
            cubeScene.style.opacity = '0.5';

            setTimeout(() => {
                switch(style) {
                    case 'wireframe':
                        document.querySelectorAll('.gradient-face').forEach(face => {
                            face.style.opacity = '0';
                        });
                        document.querySelectorAll('.wireframe-face').forEach(face => {
                            face.style.borderColor = '#00d4ff';
                            face.style.borderWidth = '3px';
                        });
                        break;
                    case 'solid':
                        document.querySelectorAll('.gradient-face').forEach(face => {
                            face.style.opacity = '1';
                        });
                        document.querySelectorAll('.wireframe-face').forEach(face => {
                            face.style.borderWidth = '1px';
                            face.style.borderColor = 'rgba(255,255,255,0.2)';
                        });
                        break;
                    case 'textured':
                        document.querySelectorAll('.gradient-face').forEach((face, index) => {
                            face.style.opacity = '0.8';
                            face.style.background = `linear-gradient(135deg, #1a1a2e, #16213e)`;
                        });
                        break;
                    default:
                        document.querySelectorAll('.gradient-face').forEach(face => {
                            face.style.opacity = '1';
                        });
                        break;
                }
                cubeScene.style.transform = 'scale(1)';
                cubeScene.style.opacity = '1';
            }, 300);
        }

        function toggleView(element, viewType) {
            document.querySelectorAll('.toggle-btn').forEach(btn => {
                btn.classList.remove('active');
            });
            element.classList.add('active');

            const grid = document.querySelector('.shapes-grid');
            if (viewType === 'list') {
                grid.style.gridTemplateColumns = '1fr';
                showToast('List view activated');
            } else {
                grid.style.gridTemplateColumns = 'repeat(3, 1fr)';
                showToast('Grid view activated');
            }
        }

        function toggleControl(element) {
            element.classList.toggle('active');
            const isActive = element.classList.contains('active');
            showToast(`${element.textContent} ${isActive ? 'enabled' : 'disabled'}`);
        }

        function triggerUpload() {
            showToast('Upload dialog opened');
            const input = document.createElement('input');
            input.type = 'file';
            input.accept = '.obj,.fbx,.dae,.3ds,.blend';
            input.multiple = true;

            input.onchange = function(e) {
                const files = Array.from(e.target.files);
                if (files.length > 0) {
                    showToast(`${files.length} file(s) selected for upload`);
                    let progress = 0;
                    const interval = setInterval(() => {
                        progress += 20;
                        showToast(`Uploading... ${progress}%`);
                        if (progress >= 100) {
                            clearInterval(interval);
                            showToast('Upload completed successfully!');
                        }
                    }, 500);
                }
            };
            input.click();
        }

        function togglePreview() {
            const cubeScene = document.querySelector('.cube-scene');
            const isPreviewMode = cubeScene.classList.contains('preview-mode');

            if (isPreviewMode) {
                cubeScene.classList.remove('preview-mode');
                cubeScene.style.animation = 'rotate3D 20s linear infinite';
                showToast('Preview mode disabled');
            } else {
                cubeScene.classList.add('preview-mode');
                cubeScene.style.animation = 'none';
                cubeScene.style.transform = 'rotateX(-15deg) rotateY(45deg)';
                showToast('Preview mode enabled');
            }
        }

        function showToast(message) {
            const toast = document.getElementById('toast');
            toast.textContent = message;
            toast.style.display = 'block';
            toast.style.opacity = '1';
            toast.style.transform = 'translateY(0)';

            setTimeout(() => {
                toast.style.opacity = '0';
                toast.style.transform = 'translateY(-20px)';
                setTimeout(() => {
                    toast.style.display = 'none';
                }, 300);
            }, 3000);
        }

        // Mouse interaction with 3D scene
        let isDragging = false;
        let startX, startY;
        let rotationX = -15, rotationY = 0;

        document.querySelector('.scene-container').addEventListener('mousedown', (e) => {
            isDragging = true;
            startX = e.clientX;
            startY = e.clientY;
            document.querySelector('.cube-scene').style.animation = 'none';
        });

        document.addEventListener('mousemove', (e) => {
            if (isDragging) {
                const deltaX = e.clientX - startX;
                const deltaY = e.clientY - startY;

                rotationY += deltaX * 0.5;
                rotationX -= deltaY * 0.5;
                rotationX = Math.max(-60, Math.min(60, rotationX));

                document.querySelector('.cube-scene').style.transform =
                    `rotateX(${rotationX}deg) rotateY(${rotationY}deg)`;

                startX = e.clientX;
                startY = e.clientY;
            }
        });

        document.addEventListener('mouseup', () => {
            if (isDragging) {
                isDragging = false;
                setTimeout(() => {
                    document.querySelector('.cube-scene').style.animation = 'rotate3D 20s linear infinite';
                }, 1000);
            }
        });

        // Keyboard shortcuts
        document.addEventListener('keydown', (e) => {
            switch(e.key) {
                case ' ':
                    e.preventDefault();
                    togglePreview();
                    break;
                case 'u':
                    if (e.ctrlKey) {
                        e.preventDefault();
                        triggerUpload();
                    }
                    break;
                case '1':
                    selectShape(document.querySelector('.shape-item'), 'wireframe');
                    break;
                case '2':
                    selectShape(document.querySelectorAll('.shape-item')[1], 'solid');
                    break;
                case '3':
                    selectShape(document.querySelectorAll('.shape-item')[2], 'textured');
                    break;
            }
        });

        // Performance monitoring
        let frameCount = 0;
        let lastTime = performance.now();

        function updatePerformance() {
            frameCount++;
            const currentTime = performance.now();

            if (currentTime - lastTime >= 1000) {
                const fps = Math.round((frameCount * 1000) / (currentTime - lastTime));
                document.title = `SIH - Fuedinct AP Desh-3D Project (${fps} FPS)`;
                frameCount = 0;
                lastTime = currentTime;
            }
            requestAnimationFrame(updatePerformance);
        }

        // Initialize everything when page loads
        window.addEventListener('load', () => {
            createParticles();
            updatePerformance();
            showToast('Welcome to Fuedinct AP 3D Converter!');

            setTimeout(() => {
                document.querySelector('.container').style.transform = 'scale(1.02)';
                setTimeout(() => {
                    document.querySelector('.container').style.transform = 'scale(1)';
                }, 300);
            }, 500);
        });
    </script>
</body>
</html>
